retry = TRUE, fail = FALSE)
saveRDS(inner, paste0('data/windows_srsg/sample_', i, '.Rds'))
return(inner$district_membership)
}
stopCluster(cl)
return(out)
}
out <- simulate_plans(seed = 4070, n = 500, adj = adj)
library(tidyverse)
devtools::load_all(path = '~/GitHub/priv-redist')
library(sf)
library(doParallel)
library(foreach)
library(doRNG)
out <- simulate_plans(seed = 4070, n = 500, adj = adj)
View(simulate_plans)
install.packages('pushoverr')
pushoverr::set_pushover_app(token = 'ax9yy9bz461bqkufoqmg8yheo92ook')
pushoverr::set_pushover_user(user = 'uix64ks13cvbyi1rnj8xviw5e5io52')
pushoverr::pushover_normal(message = 'test')
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(sf)
pres <- readRDS('pres_up.Rds')
ed <- st_read('RC_ED/Cty_ED_Jan_15_2016.shp') %>% mutate(ED_NUM = as.numeric(ED_NUM))
pres_gp <- pres %>% group_by(TOWN, ED_NUM, candidate) %>% summarize(votes = sum(votes, na.rm = T)) %>% ungroup()
pres_wide <- pivot_wider(pres_gp, id_cols = c(TOWN, ED_NUM), names_from = candidate, values_from = votes) %>% select(-WriteIn)
pres_wide[is.na(pres_wide)] <- 0
pres_wide <- pres_wide %>% mutate(WriteIn = Total - Biden - Hawkins - Jorgensen - Pierce - Trump)
df <- ed %>% left_join(pres_wide)
df <- df %>% mutate(DVS = Biden/(Biden + Trump))
p20 <- df %>% ggplot(aes(fill = DVS)) +
geom_sf(lwd = 0.1) +
coord_sf() +
theme_void() +
scale_fill_gradient2(low = '#e41a1c', high = '#377eb8', na.value = '#4daf4a', midpoint = 0.5,
space = 'Lab', guide = 'colourbar',limits = c(0,1), mid = ) +
labs(title = '2020 Presidential Outcome') +
theme(legend.position = 'bottom') +
ggsave(filename = 'Rockland_2020_DVS_up.png', height = 6, width = 3)
saveRDS(df,'forplot.Rds')
library(sf)
poly <- st_polygon(x = rbind(c(0,0), c(0,1), c(1,1) , c(1,0), c(0,0)))
poly <- st_polygon(x = list(rbind(c(0,0), c(0,1), c(1,1) , c(1,0), c(0,0))))
poly %>% ggplot() + geom_sf()
poly %>% ggplot() + geom_sf() + geom_vline(xintercept = 0.5)
poly %>% ggplot() +
geom_sf() +
geom_linerange(xintercept = 0.5)
poly %>% ggplot() +
geom_sf() +
geom_linerange(x = 0.5)
poly %>% ggplot() +
geom_sf() +
geom_linerange(x = 0.5, ymin = 0, ymax = 1)
poly %>% ggplot() +
geom_sf() +
geom_linerange(x = 0.5, ymin = 0, ymax = 1) +
geom_linerange(y = 0.5, xmin = 0, xmax = 1)
poly %>% ggplot() +
geom_sf() +
geom_linerange(x = 0.5, ymin = 0, ymax = 1) +
geom_linerange(y = 0.5, xmin = 0, xmax = 1) +
theme_void()
poly %>% ggplot() +
geom_sf(fill = NA) +
geom_linerange(x = 0.5, ymin = 0, ymax = 1) +
geom_linerange(y = 0.5, xmin = 0, xmax = 1) +
theme_void()
poly_coll <- st_sfc(poly, poly +c(0,1), poly + c(1,0), poly + c(1,1) )
poly_coll %>% ggplot() +
geom_sf(fill = NA) +
geom_linerange(x = 0.5, ymin = 0, ymax = 1) +
geom_linerange(y = 0.5, xmin = 0, xmax = 1) +
theme_void()
polly_coll <- st_as_sf(poly_coll)
poly_coll %>% ggplot() +
geom_sf(fill = NA) +
theme_void()
# then you can plot it
poly_coll %>% ggplot() +
geom_sf(fill = NA) +
theme_void()
# 3 - make it a dataframe
df <- st_as_sf(poly_coll)
# then you can plot it
df %>% ggplot() +
geom_sf(fill = NA) +
theme_void()
# then you can plot it
p <- df %>% ggplot() +
geom_sf(fill = NA) +
theme_void()
p + geom_sf(samp)
# And now you can add whatever you need:
# Sample some points in the 3rd box:
samp <- st_sample(df %>% slice(3), size = 10)
# And now you can add whatever you need:
# Sample some points in the 3rd box using sf
samp <- st_sample(df %>% slice(3), size = 10)
p + geom_sf(samp)
samp %>% ggplot() + geom_sf()
p + geom_sf(data = samp)
# or more make some points
handmade <- tibble(x = c(0.1,0.2,0.3,0.4,0.5), y = c(0.1,0.2,0.3,0.4,0.5))
handmade <- st_point(x = handmade$x, y = handmade$y)
# or more make some points
handmade <- tibble(x = c(0.1,0.2,0.3,0.4,0.5), y = c(0.1,0.2,0.3,0.4,0.5))
handmade <- st_point(x = handmade$x, y = handmade$y)
handmade <- st_point(x = handmade$x,handmade$y)
handmade <- st_point(x = c(handmade$x,handmade$y))
handmade <- st_multipoint(x = as.matrix(handmade))
# or more make some points
handmade <- tibble(x = c(0.1,0.2,0.3,0.4,0.5), y = c(0.1,0.2,0.3,0.4,0.5))
handmade <- st_multipoint(x = as.matrix(handmade))
p + geom_sf(data = handmade)
# combine them all into one dataframe to keep things cleaner!
df <- bind_rows(df, st_as_sf(samp), st_as_sf(handmade))
# or more make some points
handmade <- tibble(x = c(0.1,0.2,0.3,0.4,0.5), y = c(0.1,0.2,0.3,0.4,0.5))
handmade <- st_as_sf(x = handmade, coords = c('y', 'x'))
p + geom_sf(data = handmade)
# or more make some points
handmade <- tibble(x = c(0.1,0.2,0.3,0.4,0.5), y = c(0.1,0.2,0.3,0.4,0.7))
handmade <- st_as_sf(x = handmade, coords = c('y', 'x'))
handmade <- st_as_sf(x = handmade, coords = c('x', 'y'))
p + geom_sf(data = handmade)
# or more make some points
handmade <- tibble(lat = c(0.1,0.2,0.3,0.4,0.5), long = c(0.1,0.2,0.3,0.4,0.7))
handmade <- st_as_sf(x = handmade, coords = c('long', 'lat'))
p + geom_sf(data = handmade)
# combine them all into one dataframe to keep things cleaner!
df <- bind_rows(df, st_as_sf(samp), handmade)
nrow(df)
df %>% ggplot() + geom_sf()
df %>% ggplot() + geom_sf(fill = NA)
library(sf)
# the three magic lines that get copied into way too many projects
# 1 - create square
poly <- st_polygon(x = list(rbind(c(0,0), c(0,1), c(1,1) , c(1,0), c(0,0))))
# 2 -  make more squares just by adding c(long, lat)
poly_coll <- st_sfc(poly, poly +c(0,1), poly + c(1,0), poly + c(1,1) )
# 3 - make it a dataframe
df <- st_as_sf(poly_coll)
# then you can plot it
p <- df %>% ggplot() +
geom_sf(fill = NA) +
theme_void()
# And now you can add whatever you need:
# Sample some points in the 3rd box using sf
samp <- st_sample(df %>% slice(3), size = 10)
p + geom_sf(data = samp)
# or more make some points
handmade <- tibble(lat = c(0.1,0.2,0.3,0.4,0.5), long = c(0.1,0.2,0.3,0.4,0.7))
handmade <- st_as_sf(x = handmade, coords = c('long', 'lat'))
p + geom_sf(data = handmade)
# combine them all into one dataframe to keep things cleaner!
df <- bind_rows(df, st_as_sf(samp), handmade)
nrow(df)
df %>% ggplot() + geom_sf(fill = NA)
p + geom_sf(data = handmade)
handmade %>% ggplot() + geom_sf()
df %>% ggplot() + geom_sf(fill = NA)
st_geometry(handmade)
st_geometry(df
)
View(Df)
View(df)
poly <- st_polygon(x = list(rbind(c(0,0), c(0,1), c(1,1) , c(1,0), c(0,0))))
# 2 -  make more squares just by adding c(long, lat)
poly_coll <- st_sfc(poly, poly +c(0,1), poly + c(1,0), poly + c(1,1) )
# 3 - make it a dataframe
df <- st_as_sf(poly_coll)
# 3 - make it a dataframe
df <- st_as_sf(x=poly_coll)
# 3 - make it a dataframe
df <- st_as_sf(geometry=poly_coll)
# 3 - make it a dataframe
df <- st_as_sf(x=poly_coll)
# the three magic lines that get copied into way too many projects
# 1 - create square
poly <- st_polygon(geometry = list(rbind(c(0,0), c(0,1), c(1,1) , c(1,0), c(0,0))))
# the three magic lines that get copied into way too many projects
# 1 - create square
poly <- st_polygon(x = list(rbind(c(0,0), c(0,1), c(1,1) , c(1,0), c(0,0))))
# 2 -  make more squares just by adding c(long, lat)
poly_coll <- st_sfc(poly, poly +c(0,1), poly + c(1,0), poly + c(1,1) )
# 3 - make it a dataframe
df <- st_as_sf(x = poly_coll)
names(df)
names(df) <- 'geometry'
# then you can plot it
p <- df %>% ggplot() +
geom_sf(fill = NA) +
theme_void()
# And now you can add whatever you need:
# Sample some points in the 3rd box using sf
samp <- st_sample(df %>% slice(3), size = 10)
p + geom_sf(data = samp)
# the three magic lines that get copied into way too many projects
# 1 - create square
poly <- st_polygon(x = list(rbind(c(0,0), c(0,1), c(1,1) , c(1,0), c(0,0))))
# 2 -  make more squares just by adding c(long, lat)
poly_coll <- st_sfc(poly, poly +c(0,1), poly + c(1,0), poly + c(1,1) )
# 3 - make it a dataframe
df <- st_as_sf(x = poly_coll, sf_column_name = 'geometry')
# 2 -  make more squares just by adding c(long, lat)
poly_coll <- st_sf(poly, poly +c(0,1), poly + c(1,0), poly + c(1,1) , s)
# 2 -  make more squares just by adding c(long, lat)
poly_coll <- st_sf(poly, poly +c(0,1), poly + c(1,0), poly + c(1,1) )
# 2 -  make more squares just by adding c(long, lat)
poly_coll <- st_sfc(poly, poly +c(0,1), poly + c(1,0), poly + c(1,1) )
class(poly_coll)
# 3 - make it a dataframe
df <- tibble(geometry = poly_coll)
# then you can plot it
p <- df %>% ggplot() +
geom_sf(fill = NA) +
theme_void()
class(df)
# 3 - make it a dataframe
df <- st_sf(geometry = poly_coll)
# then you can plot it
p <- df %>% ggplot() +
geom_sf(fill = NA) +
theme_void()
df
class(df)
plot(df)
p <- df %>% ggplot() +
geom_sf(fill = NA) +
theme_void()
p
# And now you can add whatever you need:
# Sample some points in the 3rd box using sf
samp <- st_sample(df %>% slice(3), size = 10)
p + geom_sf(data = samp)
# or more make some points
handmade <- tibble(lat = c(0.1,0.2,0.3,0.4,0.5), long = c(0.1,0.2,0.3,0.4,0.7))
handmade <- st_as_sf(x = handmade, coords = c('long', 'lat'))
p + geom_sf(data = handmade)
# combine them all into one dataframe to keep things cleaner!
df <- bind_rows(df, st_as_sf(samp), handmade)
nrow(df)
df %>% ggplot() + geom_sf(fill = NA)
# combine them all into one dataframe to keep things cleaner!
df <- bind_rows(df, st_sf(geometry = samp), handmade)
nrow(df)
df %>% ggplot() + geom_sf(fill = NA)
library(sf)
# the three magic lines that get copied into way too many projects
# 1 - create square
poly <- st_polygon(x = list(rbind(c(0,0), c(0,1), c(1,1) , c(1,0), c(0,0))))
# 2 -  make more squares just by adding c(long, lat)
poly_coll <- st_sfc(poly, poly +c(0,1), poly + c(1,0), poly + c(1,1) )
# 3 - make it a dataframe
df <- st_sf(geometry = poly_coll)
# then you can plot it
p <- df %>% ggplot() +
geom_sf(fill = NA) +
theme_void()
p
# And now you can add whatever you need:
# Sample some points in the 3rd box using sf
samp <- st_sample(df %>% slice(3), size = 10)
p + geom_sf(data = samp)
# or more make some points
handmade <- tibble(lat = c(0.1,0.2,0.3,0.4,0.5), long = c(0.1,0.2,0.3,0.4,0.7))
handmade <- st_as_sf(x = handmade, coords = c('long', 'lat'))
p + geom_sf(data = handmade)
# combine them all into one dataframe to keep things cleaner!
df <- bind_rows(df, st_sf(geometry = samp), handmade)
nrow(df)
df %>% ggplot() + geom_sf(fill = NA)
# Okay and say you want to make some other random points that are red and small
newsamp <- st_sf(geometry = st_sample(df, 5))
df %>% ggplot() + geom_sf(fill = NA)
# Okay and say you want to make some other random points that are red and small
redsamp <- st_sf(geometry = st_buffer(st_sample(df, 5),1) )
# with some that are blue and bigger
bluesamp <- st_sf(geometry = st_buffer(st_sample(df, 8), 3))
df %>% ggplot() + geom_sf(fill = NA) + theme_void() +
geom_sf(data = redsamp, color = party) +
geom_sf(data = bluesamp, color = party)
df %>% ggplot() + geom_sf(fill = NA) + theme_void() +
geom_sf(data = redsamp, aes(color = party)) +
geom_sf(data = bluesamp, aes(color = party)) +
scale_color_identity()
df %>% ggplot() + geom_sf(fill = NA) + theme_void() +
geom_sf(data = redsamp, aes(color = [[data]]$party)) +
geom_sf(data = bluesamp, aes(color = party)) +
scale_color_identity()
df %>% ggplot() + geom_sf(fill = NA) + theme_void() +
geom_sf(data = redsamp, aes(color = [[data]]$party)) +
geom_sf(data = bluesamp, aes(color = party)) +
scale_color_identity()
df %>% mutate(party= NA_character_) +
ggplot() +
geom_sf(fill = NA) +
theme_void() +
geom_sf(data = redsamp, aes(color = party)) +
geom_sf(data = bluesamp, aes(color = party)) +
scale_color_identity()
df %>% mutate(party= NA_character_) +
ggplot() +
geom_sf(fill = NA) +
theme_void() +
geom_sf(data = redsamp, inherit.aes = F, aes(color = party)) +
geom_sf(data = bluesamp, inehreit.aes = F, aes(color = party)) +
scale_color_identity()
class(redsamp)
redsamp %>% ggplot() + geom_sf()
# Okay and say you want to make some other random points that are red and small
redsamp <- st_sf(geometry = st_buffer(st_sample(df, 5),.02) ) %>% mutate(party = 'red')
# with some that are blue and bigger
bluesamp <- st_sf(geometry = st_buffer(st_sample(df, 8), .1)) %>% mutate(party = 'blue')
df %>% mutate(party= NA_character_) +
ggplot() +
geom_sf(fill = NA) +
theme_void() +
geom_sf(data = redsamp, inherit.aes = F, aes(color = party)) +
geom_sf(data = bluesamp, inehreit.aes = F, aes(color = party)) +
scale_color_identity()
df %>% mutate(party = NA_character_ ) +
ggplot() +
geom_sf(fill = NA) +
theme_void()
df <- df %>% mutate(party = NA_character_ )
df %>%
ggplot() +
geom_sf(fill = NA) +
theme_void() +
geom_sf(data = redsamp, inherit.aes = F, aes(color = party)) +
geom_sf(data = bluesamp, inehreit.aes = F, aes(color = party)) +
scale_color_identity()
df %>%
ggplot() +
geom_sf(fill = NA) +
theme_void() +
geom_sf(data = redsamp, inherit.aes = F, aes(fill = party)) +
geom_sf(data = bluesamp, inehreit.aes = F, aes(fill = party)) +
scale_fill_identity()
df %>%
ggplot() +
geom_sf(fill = NA) +
theme_void() +
geom_sf(data = redsamp, inherit.aes = F, aes(fill = party)) +
geom_sf(data = bluesamp, aes(fill = party)) +
scale_fill_identity()
df %>%
ggplot() +
geom_sf(fill = NA) +
theme_void() +
geom_sf(data = redsamp, aes(fill = party)) +
geom_sf(data = bluesamp, aes(fill = party)) +
scale_fill_identity()
# Okay and say you want to make some other random points that are red and small
redsamp <- st_sf(geometry = st_buffer(st_sample(df, 5),.02) ) %>% mutate(party = 'red')
# with some that are blue and bigger
bluesamp <- st_sf(geometry = st_buffer(st_sample(df, 8), .06)) %>% mutate(party = 'blue')
df <- df %>% mutate(party = NA_character_ )
df %>%
ggplot() +
geom_sf(fill = NA) +
theme_void() +
geom_sf(data = redsamp, aes(fill = party)) +
geom_sf(data = bluesamp, aes(fill = party)) +
scale_fill_identity()
# load the best package ever
library(sf)
library(tidyverse) # and its buddy
# so that if there's anything unclear, at least we're looking at the same thing
set.seed(1)
# the three magic lines that get copied into way too many projects
# 1 - create square
poly <- st_polygon(x = list(rbind(c(0,0), c(0,1), c(1,1) , c(1,0), c(0,0))))
# 2 -  make more squares just by adding c(long, lat)
poly_coll <- st_sfc(poly, poly +c(0,1), poly + c(1,0), poly + c(1,1) )
# 3 - make it a dataframe
df <- st_sf(geometry = poly_coll)
# then you can plot it
p <- df %>% ggplot() +
geom_sf(fill = NA) +
theme_void()
p
# And now you can add whatever you need:
# Sample some points in the 3rd box using sf
samp <- st_sample(df %>% slice(3), size = 10)
p + geom_sf(data = samp)
# or more make some points
handmade <- tibble(lat = c(0.1,0.2,0.3,0.4,0.5), long = c(0.1,0.2,0.3,0.4,0.7))
handmade <- st_as_sf(x = handmade, coords = c('long', 'lat'))
p + geom_sf(data = handmade)
# combine them all into one dataframe to keep things cleaner!
df <- bind_rows(df, st_sf(geometry = samp), handmade)
nrow(df)
df %>% ggplot() + geom_sf(fill = NA)
df %>% ggplot() + geom_sf(fill = NA) + theme_void()
# Okay and say you want to make some other random points that are red and small
redsamp <- st_sf(geometry = st_buffer(st_sample(df, 5),.02) ) %>% mutate(party = 'red')
# with some that are blue and bigger
bluesamp <- st_sf(geometry = st_buffer(st_sample(df, 8), .06)) %>% mutate(party = 'blue')
df <- df %>% mutate(party = NA_character_ )
df %>%
ggplot() +
geom_sf(fill = NA) +
theme_void() +
geom_sf(data = redsamp, aes(fill = party)) +
geom_sf(data = bluesamp, aes(fill = party)) +
scale_fill_identity()
df %>%
ggplot() +
geom_sf() +
theme_void() +
geom_sf(data = redsamp, aes(fill = party)) +
geom_sf(data = bluesamp, aes(fill = party)) +
scale_fill_identity()
df %>%
ggplot() +
geom_sf(fill = NA) +
theme_void() +
geom_sf(data = redsamp, aes(fill = party)) +
geom_sf(data = bluesamp, aes(fill = party)) +
scale_fill_identity()
install.packages(c("backports", "bayestestR", "BH", "brio", "broom", "censusxy", "cli", "clusterGeneration", "cpp11", "crayon", "crosstalk", "crul", "data.table", "DBI", "dbplyr", "deldir", "desc", "diffobj", "dplyr", "DT", "estimatr", "expm", "fansi", "farver", "fastmap", "forcats", "gargle", "geojsonio", "ggforce", "ggplot2", "ggpmisc", "ggraph", "ggrepel", "ggthemes", "gh", "gifski", "git2r", "gmm", "googlesheets4", "here", "hms", "htmltools", "httpuv", "hunspell", "insight", "isoband", "JuliaCall", "knitr", "leaflet", "lfe", "lifecycle", "lubridate", "magick", "memoise", "mime", "patchwork", "pillar", "pkgbuild", "pkgKitten", "pkgload", "plotrix", "processx", "promises", "proxy", "ps", "ragg", "rappdirs", "raster", "rayimage", "Rcpp", "RcppArmadillo", "RcppEigen", "reprex", "rgdal", "rgl", "rmarkdown", "Rmpi", "robustbase", "rprojroot", "RSQLite", "segmented", "servr", "sf", "shiny", "sp", "splus2R", "testthat", "textshaping", "tibble", "tidyr", "tidytext", "tinytest", "tinytex", "udpipe", "units", "usethis", "vctrs", "waldo", "withr", "wk", "xfun"))
install.packages(c("BH", "brio", "broom", "censusxy", "cli", "clusterGeneration", "cpp11", "crayon", "crosstalk", "crul", "data.table", "DBI", "dbplyr", "deldir", "desc", "diffobj", "dplyr", "DT", "estimatr", "expm", "fansi", "farver", "fastmap", "forcats", "gargle", "geojsonio", "ggforce", "ggplot2", "ggpmisc", "ggraph", "ggrepel", "ggthemes", "gh", "gifski", "git2r", "gmm", "googlesheets4", "here", "hms", "htmltools", "httpuv", "hunspell", "insight", "isoband", "JuliaCall", "knitr", "leaflet", "lfe", "lifecycle", "lubridate", "magick", "memoise", "mime", "patchwork", "pillar", "pkgbuild", "pkgKitten", "pkgload", "plotrix", "processx", "promises", "proxy", "ps", "ragg", "rappdirs", "raster", "rayimage", "Rcpp", "RcppArmadillo", "RcppEigen", "reprex", "rgdal", "rgl", "rmarkdown", "Rmpi", "robustbase", "rprojroot", "RSQLite", "segmented", "servr", "sf", "shiny", "sp", "splus2R", "testthat", "textshaping", "tibble", "tidyr", "tidytext", "tinytest", "tinytex", "udpipe", "units", "usethis", "vctrs", "waldo", "withr", "wk", "xfun"))
remotes::install_github(repo = 'christopherkenny/styler')
devtools::install_github('kosukeimai/redist@edgecut')
devtools::install_github('kosukeimai/redist@edgecut')
devtools::install_github('kosukeimai/redist@edgecut')
devtools::install_github('kosukeimai/redist@edgecut')
# libs ----
library(tidyverse)
library(sf)
library(redist)
devtools::install_github(repo = 'kosukeimai/redist@edgecut')
devtools::install_github(repo = 'kosukeimai/redist@edgecut')
setwd("~/GitHub/redist")
devtools::submit_cran()
devtools::install_github(repo = 'r-lib/urlchecker')
urlchecker::url_check('.')
urlchecker::url_check()
urlchecker::url_check('~')
urlchecker::url_check('~/GitHub/redist')
devtools::document()
devtools::submit_cran()
setwd("~/GitHub/royaleR")
devtools::load_all()
devtools::load_all()
devtools::load_all()
test <- get_current_riverrace()
set_Royale('eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiIsImtpZCI6IjI4YTMxOGY3LTAwMDAtYTFlYi03ZmExLTJjNzQzM2M2Y2NhNSJ9.eyJpc3MiOiJzdXBlcmNlbGwiLCJhdWQiOiJzdXBlcmNlbGw6Z2FtZWFwaSIsImp0aSI6IjE1YWNlMzJhLWQ0YWYtNDljMi05ZmJjLWYwNzYzYmY2MGJkMiIsImlhdCI6MTYxMTcxNDk1OCwic3ViIjoiZGV2ZWxvcGVyLzcxZmE5OTE1LTYwMjMtYTY3NC0yNDNkLWUyMTk3NzY3YjczZiIsInNjb3BlcyI6WyJyb3lhbGUiXSwibGltaXRzIjpbeyJ0aWVyIjoiZGV2ZWxvcGVyL3NpbHZlciIsInR5cGUiOiJ0aHJvdHRsaW5nIn0seyJjaWRycyI6WyI3NC4xMDEuMjMzLjEyMCJdLCJ0eXBlIjoiY2xpZW50In1dfQ.9w3DzCnD7UvwlpWdZXekWm-p5xllUwfcHqXiiU_8fVjgtxGgH0abG-869-CdY6G4gD5qeUzb-Eis6W34YJIKpA')
test <- get_current_riverrace()
usethis::edit_r_environ()
get_current_riverrace()
test <- get_current_riverrace()
View(test)
test$sectionIndex
test$clan$finishTime
test$clan$participants
test$clan$participants %>% View()
as_tibble(test$clan$participants)
dplyr::as_tibble(test$clan$participants)
library(tidyverse)
dplyr::bind_rows(test$clan$participants)
dplyr::bind_rows(test$clan$participants) %>% View()
test$state
test$sectionIndex
test$clan$participants
test$clan$participants[[1]]
get_api_url()
devtools::load_all()
get_player
get_player()
devtools::load_all()
get_clan()
test <- get_clan()
View(tes)
View(test)
test$location
test$memberList %>% bind_rows()
test$memberList %>% View()
styler:::set_style_transformers()
styler:::style_active_file()
styler:::style_active_pkg()
install.packages('httr2')
usethis::use_package('httr2')
devtools::load_all()
pedant:::add_double_colons()
pedant:::add_double_colons()
usethis::use_tibble()
usethis::use_package('cli')
x <- get_player()
set_Royale
Sys.setenv(CRAPI = 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiIsImtpZCI6IjI4YTMxOGY3LTAwMDAtYTFlYi03ZmExLTJjNzQzM2M2Y2NhNSJ9.eyJpc3MiOiJzdXBlcmNlbGwiLCJhdWQiOiJzdXBlcmNlbGw6Z2FtZWFwaSIsImp0aSI6IjY1MTg0MWNjLTI5MDItNGVlMy05MGNhLTJhY2RkNTJkZTQwZSIsImlhdCI6MTYzNTgyNDI5OCwic3ViIjoiZGV2ZWxvcGVyLzcxZmE5OTE1LTYwMjMtYTY3NC0yNDNkLWUyMTk3NzY3YjczZiIsInNjb3BlcyI6WyJyb3lhbGUiXSwibGltaXRzIjpbeyJ0aWVyIjoiZGV2ZWxvcGVyL3NpbHZlciIsInR5cGUiOiJ0aHJvdHRsaW5nIn0seyJjaWRycyI6WyIxMzAuNDQuMTcwLjIwMCJdLCJ0eXBlIjoiY2xpZW50In1dfQ.Uyk6kOCvmI4eww_TDpMFHFhNAjmFpFt9NPBLjw8a3wFvXkG6WggbTuXoi8cTqP_d49HszPOPo7NJ63MCakKX-A')
get_player()
get_player() -> x
x$cards %>% View()
library(magrittr)
x$cards %>% View()
lapply(x$cards, names)
lapply(x$cards, \(y) y$name)
lapply(x$cards, \(y) y$name) %>% unlist()
.[[97]][["iconUrls"]][["medium"]]
x$cards[[97]][["iconUrls"]][["medium"]]
x$cards[[96]][["iconUrls"]][["medium"]]
x$cards[[98]][["iconUrls"]][["medium"]]
usethis::use_git()
available::available_on_cran('apicr')
available::available_on_cran('tidycr')
available::available_on_cran('tidycoc')
load("~/GitHub/royaleR/R/.RData")
